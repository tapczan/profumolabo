<?php
/**
 * @author Check AUTHORS file.
 * @copyright TBD
 * @license TBD
 */

namespace ASoftwareHouse\EParagony\Spark;

use ASoftwareHouse\EParagony\ConfigHelper;
use ASoftwareHouse\EParagony\ConfigurationHolder;
use ASoftwareHouse\EParagony\MagicBox;
use LogicException;

class ApiSparkFactory
{
    private $config;
    private $magicBox;
    private $logDir;

    public function __construct(ConfigHelper $configHelper, MagicBox $magicBox, $logDir)
    {
        $this->config = $configHelper::getSavedConfig();
        $this->magicBox = $magicBox;
        $this->logDir = $logDir;
    }

    /*
     * Get api proxy.
     *
     * This method is too fragile to put in autogenerated code.
     */
    public function getApiClass() : ApiSpark
    {
        $config = $this->config;
        $url = self::getUrl($config);
        $payload = http_build_query([
            'grant_type' => 'client_credentials',
            'client_secret' => $config->client_secret,
            'client_id' => $config->client_id,
            'scope' => 'ecommerce',
        ]);

        $curl = curl_init();
        curl_setopt_array($curl, [
            CURLOPT_POST => true,
            CURLOPT_URL => $url . '/auth/token',
            CURLOPT_POSTFIELDS => $payload,
            CURLOPT_RETURNTRANSFER => true,
        ]);
        $rawResponse = curl_exec($curl);
        $response = json_decode($rawResponse, true);
        if (isset($response['access_token'])) {
            $token = $response['access_token'];
        } else {
            throw new ApiSparkException('Cannot connect to API Spark.', ApiSparkException::CODE_CANNOT_AUTHENTICATE);
        }

        $taxHelper = new TaxHelperForSpark(
            $config->tax_a,
            $config->tax_b,
            $config->tax_c,
            $config->tax_d,
            $config->tax_e,
            $config->tax_f,
            $config->tax_g
        );

        return new ApiSpark(
            $config->printer_type,
            $config->store_nip,
            $token,
            $url,
            $config->log_spark_requests,
            $this->logDir,
            $config->return_policy_spark,
            $this->magicBox::getModuleLink('spark'),
            $taxHelper
        );
    }

    private static function getUrl(ConfigurationHolder $config)
    {
        if ($config->test_mode) {
            return 'https://sandbox.login.spark.pl';
        } else {
            throw new LogicException('Not implemented yet.');
        }
    }
}
